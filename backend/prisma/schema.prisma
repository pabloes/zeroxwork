datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  USER
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  password String
  role     Role     @default(USER)
  createdAt DateTime @default(now())
  verified          Boolean  @default(false)
  verificationCode  String?
  updatedAt         DateTime @updatedAt
  maxQuota          Int      @default(5242880)
  extraQuota        Int      @default(0)
  fileUploads       FileUpload[]
  apiKeys           ApiKey[]
  wallets           Wallet[]
  articles          Article[]

  @@map("users")
}

model Wallet {
  id        Int     @id @default(autoincrement())
  address   String  @unique
  userId    Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  walletDecentralandNames WalletDecentralandNames[]

}

model FileUpload {
  id         Int      @id @default(autoincrement())
  fileName   String
  fileSize   Int
  md5Hash    String?
  sha256Hash String   @unique
  uploadDate DateTime @default(now())
  userId     Int
  analysisId String?
  status     String   @default("pending")
  dangerous  Boolean  @default(false)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  banned     Boolean  @default(false)

  @@index([userId])
  @@index([sha256Hash])

  @@map("file_uploads")
}

model ApiKey {
  id          Int      @id @default(autoincrement())
  key         String   @unique // API Key única
  userId      Int      // Relación con el usuario
  createdAt   DateTime @default(now())
  lastUsedAt  DateTime? // Última vez que se usó la API Key
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("api_keys")
}

model WalletDecentralandNames {
  id        Int      @id @default(autoincrement())
  walletId  Int
  wallet    Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Article {
  id        Int      @id @default(autoincrement())
  title     String   // Título del artículo
  content   String   // Contenido del artículo en formato Markdown
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int      // Relación con el usuario que creó el artículo
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  thumbnail String?  // Nueva columna para almacenar la URL del thumbnail
  published Boolean  @default(false)  // New field to mark whether the article is published
  featured  Boolean  @default(false)  // New field to indicate if the article is featured

  @@index([userId])
  @@map("articles")  // Cambia el nombre de la tabla si es necesario
}
