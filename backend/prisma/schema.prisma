datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  USER
}

model User {
  id                 Int      @id @default(autoincrement())
  email              String   @unique
  password           String
  role               Role     @default(USER)
  createdAt          DateTime @default(now())
  verified           Boolean  @default(false)
  verificationCode   String?
  updatedAt          DateTime @updatedAt
  maxQuota           Int      @default(5242880)
  extraQuota         Int      @default(0)
  fileUploads        FileUpload[]
  apiKeys            ApiKey[]
  wallets            Wallet[]
  articles           Article[]
  defaultNameId      Int?     @unique // Mark this as unique for one-to-one relation
  defaultName        WalletNames? @relation(fields: [defaultNameId], references: [id]) // Updated relation to renamed model

  @@map("users")
}

model Wallet {
  id                Int     @id @default(autoincrement())
  address           String  @unique
  userId            Int
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  walletNames       WalletNames[] // Updated relation to renamed model


}

model WalletNames { // Renamed model
  id        Int      @id @default(autoincrement())
  walletId  Int
  wallet    Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  name      String
  subdomain String?  // New optional subdomain field
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation

  @@map("WalletDecentralandNames") // Map to the existing table
}

model FileUpload {
  id         Int      @id @default(autoincrement())
  fileName   String
  fileSize   Int
  md5Hash    String?
  sha256Hash String   @unique
  uploadDate DateTime @default(now())
  userId     Int
  analysisId String?
  status     String   @default("pending")
  dangerous  Boolean  @default(false)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  banned     Boolean  @default(false)

  @@index([userId])
  @@index([sha256Hash])

  @@map("file_uploads")
}

model ApiKey {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  userId      Int
  createdAt   DateTime @default(now())
  lastUsedAt  DateTime?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("api_keys")
}

model Article {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  thumbnail String?
  published Boolean  @default(false)
  featured  Boolean  @default(false)

  @@index([userId])
  @@map("articles")
}
